
Bodies:
 User = {"id":String,
        "name":String,
        "balance":Integer,
        "debt":Integer}

 Offer = {"id":String,
          "userid":String,
          "username":String,
          "sum":Integer,
          "IsAccepted":Boolean //Unnecessary of you, so ignore this one }
 Transfer = {"id":String, 
	     "userGiverId":String,
         "userRecieverId":String,
	     "sum":Int,
	     "timeAccepted":String,
	     "isClosed":Boolean}


GET ./api/users
	Response : Collection of Users

GET ./api/users/{id}
	Response : User

POST ./api/users
	Request : User
	if "name" is empty then
	    Response : null
	if everything is OK then
	    Response : User

DELETE ./api/users/{id}
	Response is empty

PATCH ./api/users/{id}
	Request : User
	Response : User, 
		or 
	if the user was bad then 
	Response : null

PATCH ./api/users/{id}/addcash?sum={int}
PATCH ./api/users/{id}/lowerdebt?sum={int}
    response : body of a user with a new balance and a new debt

GET ./api/offers
	Response : List of Offers

GET ./api/offers/{offer.id}
	Response : Offer that has offer.id as his own id

PATCH ./api/offers/{offer.id}/accept
	Request : Body of a User of accepting the offer
	Response : ok or badRequest. If response is bad it means the offer cannot be accepted

POST ./api/offers
	Request : Offer ("userid" must not be empty and sum must not equal 0)
	Response : Offer
	    or
	if request didn't met requirements then
	Response : badRequest

DELETE ./api/offers/{offer.id}/delete?userid={user.id}
    To cancel the offer give user.id of an active user, and he is an owner of this offer, he can delete it
    If userId

GET ./api/transfers/{user.id}
    Response : list of transfers that somehow connected to user.id

GET ./api/transfers/{user.id}/debts
    Response : list of transfers that are debts

GET ./api/transfers/{user.id}/credits
    Response : list of transfers that are credits